<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[C++11 智能指针 – Part 1 shared_ptr 教程和示例代码]]></title>
      <url>/2017/07/16/C++11%20%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%20%E2%80%93%20Part%201%20shared_ptr%20%E6%95%99%E7%A8%8B%E5%92%8C%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p><a href="http://thispointer.com/learning-shared_ptr-part-1-usage-details/" target="_blank" rel="external">原文地址</a></p>
<blockquote>
<p>译注： 本翻译只遵循文章要表达的意图，而不会逐句翻译。</p>
<p>这个是一系列关于智能指针的文章，谈及的东西都是比较入门的介绍。</p>
</blockquote>
<h1 id="什么是std-shared-ptr-lt-gt-？"><a href="#什么是std-shared-ptr-lt-gt-？" class="headerlink" title="什么是std::shared_ptr&lt;&gt;？"></a>什么是std::shared_ptr&lt;&gt;？</h1><p><code>shared_ptr</code>是<code>C++11</code>提供的智能指针的一种。用来在离开作用域的时候，自动删除相关联指针的技术。因此它可以帮助我们处理一些因为疏忽大意而导致的内存泄漏和指针悬挂问题。</p>
<h1 id="shared-ptr和共享所有权"><a href="#shared-ptr和共享所有权" class="headerlink" title="shared_ptr和共享所有权"></a>shared_ptr和共享所有权</h1><p>谈及<code>shared_ptr</code>就不得不谈及资源所有权的问题。不同的<code>shared_ptr</code>可以关联到t相同的资源指针，内部使用引用计数来进行管理。</p>
<p><strong>每个<code>shared_ptr</code>对象内部都指向两个内存地址：</strong></p>
<ul>
<li>指向资源对象</li>
<li>指向用于引用计数的数据结构</li>
</ul>
<p><strong>共享所有权是如何通过引用计数来实现的？</strong></p>
<ul>
<li>当一个新的<code>shared_ptr</code>对象和一个裸指针关联时，在构造函数内会对此裸指针关联的引用计数加1</li>
<li>当<code>shared_ptr</code>超出作用域时，在其析构函数内，会对其关联的引用计数减1。如果引用计数变为0,也就意味着没有其他的<code>shared_ptr</code>对象和裸指针所指向的内存相关联了，那么就是使用“delete”函数来释放内存空间。</li>
</ul>
<h1 id="创建一个shared-ptr对象"><a href="#创建一个shared-ptr对象" class="headerlink" title="创建一个shared_ptr对象"></a>创建一个<code>shared_ptr</code>对象</h1><h2 id="方法1：使用构造"><a href="#方法1：使用构造" class="headerlink" title="方法1：使用构造"></a>方法1：使用构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p1(<span class="keyword">new</span> <span class="keyword">int</span>());</div></pre></td></tr></table></figure>
<p>上述代码在堆上分配了两块内存：</p>
<ol>
<li>为对象int</li>
<li>管理<code>shared_ptr</code>对象的引用计数的内存。初始值为1.</li>
</ol>
<p><strong>检查一个<code>shared_ptr</code>对象的引用计数：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p1.use_count();</div></pre></td></tr></table></figure></p>
<h2 id="方法2：使用std-make-shared"><a href="#方法2：使用std-make-shared" class="headerlink" title="方法2：使用std::make_shared"></a>方法2：使用std::make_shared<t></t></h2><p>不能直接将指针赋值给一个<code>shared_ptr</code>对象<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Compile Error</span></div><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p1 = <span class="keyword">new</span> <span class="keyword">int</span>(); <span class="comment">// Compile error</span></div></pre></td></tr></table></figure></p>
<p>因为<code>shared_ptr</code>的构造函数式显示接收一个参数,想方法1一样。创建<code>shared_ptr</code>对象最好的方式是通过<code>std::make_shared</code>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p1 = <span class="built_in">std</span>::make_shared&lt;<span class="keyword">int</span>&gt;();</div></pre></td></tr></table></figure></p>
<p>好处是<code>std::make_ptr</code>只会分配一个内存块,也就是 new operator只会调用一次。</p>
<h2 id="从裸指针分离"><a href="#从裸指针分离" class="headerlink" title="从裸指针分离"></a>从裸指针分离</h2><p>使用<code>reset()</code>函数会使<code>shared_ptr</code>对象的引用计数减1。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p1.reset();</div></pre></td></tr></table></figure></p>
<p><code>reset()</code>还有一种用法，就是指向一个新的指针，内部的引用计数会被重置为1。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p1.reset(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">34</span>));</div></pre></td></tr></table></figure></p>
<p>从裸指针分离的第二个方法是直接赋值为<code>nullptr</code>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p1 = <span class="literal">nullptr</span>;</div></pre></td></tr></table></figure></p>
<p><strong><code>shared_ptr</code>是一个<em>伪</em>指针（psuedo pointer）</strong><br><code>shared_ptr</code>会假装成一个正常的指针。比如我们可用 <code>*</code>和<code>-&gt;</code>来操作<code>shared_ptr</code>对象。</p>
<p>完整的示例如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;memory&gt; // shared_ptr的t头文件</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">// 通过`make_shared`创建一个`shared_ptr`对象</span></div><div class="line">	<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p1 = <span class="built_in">std</span>::make_shared&lt;<span class="keyword">int</span>&gt;();</div><div class="line">	*p1 = <span class="number">78</span>;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"p1 = "</span> &lt;&lt; *p1 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="comment">// 打印引用计数</span></div><div class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"p1 Reference count = "</span> &lt;&lt; p1.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="comment">// 第二个`shared_ptr`对象内部会指向同一个指针，因此引用计数会变成2</span></div><div class="line">	<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p2(p1);</div><div class="line"> </div><div class="line">  <span class="comment">// 打印引用计数</span></div><div class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"p2 Reference count = "</span> &lt;&lt; p2.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"p1 Reference count = "</span> &lt;&lt; p1.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="comment">// `shared_ptr`对象比较</span></div><div class="line">	<span class="keyword">if</span> (p1 == p2)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"p1 and p2 are pointing to same pointer\n"</span>;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Reset p1 "</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">	p1.reset();</div><div class="line"> </div><div class="line">  <span class="comment">// 重置 `shared_ptr`对象，此对象内部不再指向裸指针，因此引用计数会变成0</span></div><div class="line"></div><div class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"p1 Reference Count = "</span> &lt;&lt; p1.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="comment">// 重置 `shared_ptr`对象，此对象内部指向一个新的裸指针，因此引用计数会变成1</span></div><div class="line"> </div><div class="line">	p1.reset(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">11</span>));</div><div class="line"> </div><div class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"p1  Reference Count = "</span> &lt;&lt; p1.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="comment">// 使用nullptr进行赋值</span></div><div class="line">	p1 = <span class="literal">nullptr</span>;</div><div class="line"> </div><div class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"p1  Reference Count = "</span> &lt;&lt; p1.use_count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">	<span class="keyword">if</span> (!p1)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"p1 is NULL"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">p1 = <span class="number">78</span></div><div class="line">p1 Reference count = <span class="number">1</span></div><div class="line">p2 Reference count = <span class="number">2</span></div><div class="line">p1 Reference count = <span class="number">2</span></div><div class="line">p1 <span class="keyword">and</span> p2 are pointing to same pointer</div><div class="line">Reset p1 </div><div class="line">p1 Reference Count = <span class="number">0</span></div><div class="line">p1  Reference Count = <span class="number">1</span></div><div class="line">p1  Reference Count = <span class="number">0</span></div><div class="line">p1 is <span class="literal">NULL</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CPP </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript入门需要了解的概念]]></title>
      <url>/2017/07/08/JavaScript%E5%85%A5%E9%97%A8%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>&ensp;&ensp;&ensp;作为一个一直从事C\C++的程序员来说，进入JavaScript的世界就好像从室内泳池一下子到太平洋的感觉。在C++的世界，一切都比较封闭，你只需要一个文本编辑器，一个编译器或者一个IDE就足够了。然后你就能用你最爱的泳姿“游泳”了。而在JavaScript的世界里，除了前者的文本编辑器，要考虑和了解事情实在是太多了。诸如ES5、ES6、Babel、webpack等，每年都会出现各种框架，各种库，层出不穷，完全可以把人淹没。</p>
<p>写这篇文章的目的主要是为了记录在自己进入这个圈子里，在这个过程中学习到的一些知识，了解了这些基础知识，可能就会少走一些弯路。</p>
<h1 id="JavaScript的版本"><a href="#JavaScript的版本" class="headerlink" title="JavaScript的版本"></a>JavaScript的版本</h1><p>&ensp;&ensp;&ensp;不管何种语言，在进入21世纪后，标准化的工作都进行得越来越频繁。举个例子，拿C++来说，C++98，然后是C++03，之后就是C++11、C++14、C++17、C++20。而且标准委员会对于标准化的进程也做出了比较明确的规划。但是标准的制定和现实中各大编译器厂商的实现之间会有一定的鸿沟。</p>
<p>&ensp;&ensp;&ensp;JavaScript也一样，TC39现在采取的是小步快走的模式，也就是在每一次的标准更新中都只加入少量的特性，但是保持一定的更新频率，而不是一次加入大量的特性，然后好几年更新一次标准。</p>
<p>&ensp;&ensp;&ensp;JavaScript是业界对这门语言的称呼，而在标准制定过程中，是由ECMA这个机构来负责,确切说是ECMA的第39号技术专家委员会（Technical Committee 39，简称TC39）负责制订ECMAScript标准，成员包括Microsoft、Mozilla、Google等大公司。<br>所以目前的主流是ES6，或者称为ES2015。</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><blockquote>
<p>1998年6月，ECMAScript 2.0版发布。</p>
<p>1999年12月，ECMAScript 3.0版发布，成为JavaScript的通行标准，得到了广泛支持。</p>
<p>2007年10月，ECMAScript 4.0版草案发布，对3.0版做了大幅升级，预计次年8月发布正式版本。草案发布后，由于4.0版的目标过于激进，各方对于是否通过这个标准，发生了严重分歧。以Yahoo、Microsoft、Google为首的大公司，反对JavaScript的大幅升级，主张小幅改动；以JavaScript创造者Brendan Eich为首的Mozilla公司，则坚持当前的草案。</p>
<p>2008年7月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激进，ECMA开会决定，中止ECMAScript 4.0的开发，将其中涉及现有功能改善的一小部分，发布为ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为Harmony（和谐）。会后不久，ECMAScript 3.1就改名为ECMAScript 5。</p>
<p>2009年12月，ECMAScript 5.0版正式发布。Harmony项目则一分为二，一些较为可行的设想定名为JavaScript.next继续开发，后来演变成ECMAScript 6；一些不是很成熟的设想，则被视为JavaScript.next.next，在更远的将来再考虑推出。</p>
<p>2011年6月，ECMAscript 5.1版发布，并且成为ISO国际标准（ISO/IEC 16262:2011）。</p>
<p>2013年3月，ECMAScript 6草案冻结，不再添加新功能。新的功能设想将被放到ECMAScript 7。</p>
<p>2013年12月，ECMAScript 6草案发布。然后是12个月的讨论期，听取各方反馈。</p>
<p>2015年6月17日，ECMAScript 6发布正式版本，即ECMAScript 2015。</p>
</blockquote>
<p>&ensp;&ensp;&ensp;以上信息来自于来自<a href="http://baike.baidu.com/item/ECMAScript" target="_blank" rel="external">百度百科</a></p>
<p>&ensp;&ensp;&ensp;上面也提及到，标准的制定和标准的实现是两大阵营。JavaScript的标准实现主要是各大浏览器厂商。而浏览器厂商的实现步伐肯定是落后于标准的制定。但是同时开发者又倾向于在源码中使用新的标准特性，但是用新特性编写的代码在脚本运行环境中又不支持，此时就要谈及到Babel了，一个源码到源码（source-to-source）的转译（transpiller）工具了。</p>
<h1 id="运行时环境"><a href="#运行时环境" class="headerlink" title="运行时环境"></a>运行时环境</h1><p>&ensp;&ensp;&ensp;目前JavaScript的语言定位是通用型语言，也就是说它不仅仅只是运行在浏览器端，它可以运行在服务端（通过Node.js），运行在移动端（通过React Native），同时也可以创建桌面型应用（通过Electron）。在每个不同的平台上，侧重点是不一样的，所以就导致了应用的一些技术也不同，很明显的就是在服务端和浏览器端的模块化管理。</p>
<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>&ensp;&ensp;&ensp;模块化是每个语言要应用在中大型项目中避免不了的问题。而JavaScript的标准中却迟迟没有对这方面进行标准化。这也就导致了民间出现了很多用于模块化管理的方法或者工具。最常见的也是最主流的有AMD（Asynchronous Module Definition）、CommonJS、UMD（Universal Module Definition）。</p>
<p>&ensp;&ensp;&ensp;三者间的主要区别是：</p>
<ul>
<li>AMD，如其名，是异步加载的，主要用在浏览器端</li>
<li>CommonJs，则是同步加载的，主要用于服务端，Node环境下</li>
<li>UMD的目标则是想统一上述两者的语法差异</li>
</ul>
<p>&ensp;&ensp;&ensp;通过下面例子来看看AMD和CommonJS的语法上的区别。<br>最初的源码，使用的是ES6规范：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span> (name, age) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  printInfo () &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Name: &#123;this.age&#125;, age: &#123;this.age&#125;`</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&ensp;&ensp;&ensp;babel默认情况下产生的输出如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</div><div class="line">  <span class="attr">value</span>: <span class="literal">true</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> _createClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="function"><span class="keyword">function</span> <span class="title">defineProperties</span>(<span class="params">target, props</span>) </span>&#123; <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123; <span class="keyword">var</span> descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || <span class="literal">false</span>; descriptor.configurable = <span class="literal">true</span>; <span class="keyword">if</span> (<span class="string">"value"</span> <span class="keyword">in</span> descriptor) descriptor.writable = <span class="literal">true</span>; <span class="built_in">Object</span>.defineProperty(target, descriptor.key, descriptor); &#125; &#125; <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">Constructor, protoProps, staticProps</span>) </span>&#123; <span class="keyword">if</span> (protoProps) defineProperties(Constructor.prototype, protoProps); <span class="keyword">if</span> (staticProps) defineProperties(Constructor, staticProps); <span class="keyword">return</span> Constructor; &#125;; &#125;();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> _classCallCheck(<span class="params">instance, Constructor</span>) </span>&#123; <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>); &#125; &#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">    _classCallCheck(<span class="keyword">this</span>, Person);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  _createClass(Person, [&#123;</div><div class="line">    <span class="attr">key</span>: <span class="string">"printInfo"</span>,</div><div class="line">    <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> <span class="title">printInfo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"Name: &#123;this.age&#125;, age: &#123;this.age&#125;"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;]);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Person;</div><div class="line">&#125;();</div><div class="line"></div><div class="line">exports.default = Person;</div></pre></td></tr></table></figure></p>
<p>&ensp;&ensp;&ensp;这其实是CommonJS的语法格式。如果想要生成AMD格式的，需要借助babel-plugin-transform-es2015-modules-amd插件。输出如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">"exports"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">exports</span>) </span>&#123;</div><div class="line"><span class="meta">  "use strict"</span>;</div><div class="line"></div><div class="line">  <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</div><div class="line">    <span class="attr">value</span>: <span class="literal">true</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> _classCallCheck(<span class="params">instance, Constructor</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> _createClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">defineProperties</span>(<span class="params">target, props</span>) </span>&#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> descriptor = props[i];</div><div class="line">        descriptor.enumerable = descriptor.enumerable || <span class="literal">false</span>;</div><div class="line">        descriptor.configurable = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="string">"value"</span> <span class="keyword">in</span> descriptor) descriptor.writable = <span class="literal">true</span>;</div><div class="line">        <span class="built_in">Object</span>.defineProperty(target, descriptor.key, descriptor);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">Constructor, protoProps, staticProps</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (protoProps) defineProperties(Constructor.prototype, protoProps);</div><div class="line">      <span class="keyword">if</span> (staticProps) defineProperties(Constructor, staticProps);</div><div class="line">      <span class="keyword">return</span> Constructor;</div><div class="line">    &#125;;</div><div class="line">  &#125;();</div><div class="line"></div><div class="line">  <span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">      _classCallCheck(<span class="keyword">this</span>, Person);</div><div class="line"></div><div class="line">      <span class="keyword">this</span>.name = name;</div><div class="line">      <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    _createClass(Person, [&#123;</div><div class="line">      <span class="attr">key</span>: <span class="string">"printInfo"</span>,</div><div class="line">      <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> <span class="title">printInfo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Name: &#123;this.age&#125;, age: &#123;this.age&#125;"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Person;</div><div class="line">  &#125;();</div><div class="line"></div><div class="line">  exports.default = Person;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>&ensp;&ensp;&ensp;随着ES6标准的发布，在ES6中已经原生支持了模块化的功能。所有可以在代码中使用ES6的原生模块化的语法。</p>
<p>&ensp;&ensp;&ensp;有时我们需要关注产出物的模块管理方式，这样在使用的时候才不会出现各种问题。Babel只做了源码转译的工作，每一个输入文件对应一个输出文件，所以我们需要一个将这些输出文件打包成一个文件的工具，也就是webpack。</p>
<h1 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h1><p>&ensp;&ensp;&ensp;<a href="https://babeljs.io/" target="_blank" rel="external">Babel</a>是一个让开发者可以用新特性编写代码，同时又能运行的一个工具。主要是弥补上述提及的新标准和浏览器支持度之间的鸿沟。它的主要设计思想是插件化。</p>
<p>&ensp;&ensp;&ensp;Babel有几种运行方式：</p>
<ul>
<li>命令行的方式，通过babel-cli</li>
<li>运行在node环境下，通过babel-node</li>
<li>运行在源码中，通过babel-register</li>
</ul>
<p>&ensp;&ensp;&ensp;在上面章节中，我们使用了插件babel-plugin-transform-es2015-modules-amd来生成AMD格式的代码。使用插件的方式可以通过命令行，比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel --plugins transform-es2015-modules-amd .\src.js -o dst.js</div></pre></td></tr></table></figure></p>
<p>&ensp;&ensp;&ensp;或者也可以使用.babelrc配置文件来进行配置，比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>],</div><div class="line">  <span class="string">"plugins"</span>: [<span class="string">"transform-es2015-modules-amd"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&ensp;&ensp;&ensp;还有一些配置可以参照官方文档。</p>
<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>&ensp;&ensp;&ensp;<a href="https://webpack.js.org/" target="_blank" rel="external">Webpack</a>是个打包工具，同时也会管理模块的依赖关系。是目前比较主流的打包工具。webpack本身也是使用模块化的方法去打包，同时也是插件化的组织方式。具有以下几个特点：</p>
<ul>
<li>代码拆分（code splitting）</li>
<li>静态分析</li>
<li>模块热替换（Hot Module Replacement）</li>
</ul>
<p>&ensp;&ensp;&ensp;打包后的文件可直接被使用。但是同时有一点需要注意的是，就是打包后的文件格式采取的模块化管理方式。为了将bundle适应不同的运行时环境，通过output.libraryTarget选项，webpack支持将bundle打包成不同格式的模块化代码。具体设置可以参考<a href="https://webpack.js.org/configuration/output/#output-librarytarget" target="_blank" rel="external">此链接</a>。</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript的19个精简语法]]></title>
      <url>/2017/06/25/JavaScript%E7%9A%8419%E4%B8%AA%E7%B2%BE%E7%AE%80%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="三元操作符简短写法"><a href="#三元操作符简短写法" class="headerlink" title="三元操作符简短写法"></a>三元操作符简短写法</h1><p><strong><strong>Longhand:</strong></strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> x = <span class="number">20</span>;</div><div class="line"><span class="keyword">let</span> big;</div><div class="line"><span class="keyword">if</span> (x &gt; <span class="number">10</span>) &#123;</div><div class="line">    big = <span class="literal">true</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    big = <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> big = x &gt; <span class="number">10</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</div></pre></td></tr></table></figure></p>
<p>或者嵌套：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> big = x &gt; <span class="number">10</span> ? <span class="string">" greater 10"</span> : x &lt; <span class="number">5</span> ? <span class="string">"less 5"</span> : <span class="string">"between 5 and 10"</span>;</div></pre></td></tr></table></figure></p>
<p>个人认为最后一个可读性较差，不建议使用。</p>
<h1 id="短路计算简短写法"><a href="#短路计算简短写法" class="headerlink" title="短路计算简短写法"></a>短路计算简短写法</h1><p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (variable1 !== <span class="literal">null</span> || variable1 !== <span class="literal">undefined</span> || variable1 !== <span class="string">''</span>) &#123;</div><div class="line">     <span class="keyword">let</span> variable2 = variable1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> variable2 = variable1  || <span class="string">'new'</span>;</div></pre></td></tr></table></figure></p>
<p>这个很厉害了，大部分人都不太清楚，至少我自己也是。但是它确实可以写成这样。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> variable1;</div><div class="line"><span class="keyword">let</span> variable2 = variable1  || <span class="string">''</span>;</div><div class="line"><span class="built_in">console</span>.log(variable2 === <span class="string">''</span>); <span class="comment">// prints true</span></div><div class="line">variable1 = <span class="string">'foo'</span>;</div><div class="line">variable2 = variable1  || <span class="string">''</span>;</div><div class="line"><span class="built_in">console</span>.log(variable2); <span class="comment">// prints foo</span></div></pre></td></tr></table></figure></p>
<h1 id="变量声明简短写法"><a href="#变量声明简短写法" class="headerlink" title="变量声明简短写法"></a>变量声明简短写法</h1><p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x;</div><div class="line"><span class="keyword">let</span> y;</div><div class="line"><span class="keyword">let</span> z = <span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x, y, z=<span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<h1 id="If控制语句简短写法"><a href="#If控制语句简短写法" class="headerlink" title="If控制语句简短写法"></a>If控制语句简短写法</h1><p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (likeJavaScript === <span class="literal">true</span>)</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (likeJavaScript)</div></pre></td></tr></table></figure></p>
<p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a;</div><div class="line"><span class="keyword">if</span> ( a !== <span class="literal">true</span> ) &#123;</div><div class="line"><span class="comment">// do something...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a;</div><div class="line"><span class="keyword">if</span> ( !a ) &#123;</div><div class="line"><span class="comment">// do something...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="for控制语句简短写法"><a href="#for控制语句简短写法" class="headerlink" title="for控制语句简短写法"></a>for控制语句简短写法</h1><p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allImgs.length; i++)</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> allImgs)</div></pre></td></tr></table></figure></p>
<p>对于Array：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArrayElements</span>(<span class="params">element, index, array</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"a["</span> + index + <span class="string">"] = "</span> + element);</div><div class="line">&#125;</div><div class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>].forEach(logArrayElements);</div><div class="line"><span class="comment">// logs:</span></div><div class="line"><span class="comment">// a[0] = 2</span></div><div class="line"><span class="comment">// a[1] = 5</span></div><div class="line"><span class="comment">// a[2] = 9</span></div></pre></td></tr></table></figure></p>
<h1 id="短路计算"><a href="#短路计算" class="headerlink" title="短路计算"></a>短路计算</h1><p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dbHost;</div><div class="line"><span class="keyword">if</span> (process.env.DB_HOST) &#123;</div><div class="line">  dbHost = process.env.DB_HOST;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  dbHost = <span class="string">'localhost'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> dbHost = process.env.DB_HOST || <span class="string">'localhost'</span>;</div></pre></td></tr></table></figure></p>
<h1 id="基于十进制的指数"><a href="#基于十进制的指数" class="headerlink" title="基于十进制的指数"></a>基于十进制的指数</h1><p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1e7</span>; i++) &#123;&#125;</div><div class="line"><span class="comment">// All the below will evaluate to true</span></div><div class="line"><span class="number">1e0</span> === <span class="number">1</span>;</div><div class="line"><span class="number">1e1</span> === <span class="number">10</span>;</div><div class="line"><span class="number">1e2</span> === <span class="number">100</span>;</div><div class="line"><span class="number">1e3</span> === <span class="number">1000</span>;</div><div class="line"><span class="number">1e4</span> === <span class="number">10000</span>;</div><div class="line"><span class="number">1e5</span> === <span class="number">100000</span>;</div></pre></td></tr></table></figure></p>
<h1 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h1><p>以下是对于ES6之后的。</p>
<p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>:x, <span class="attr">y</span>:y &#125;;</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123; x, y &#125;;</div></pre></td></tr></table></figure></p>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>这应该属于ES6的语法上的使用</p>
<p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, name);</div><div class="line">&#125;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Loaded'</span>)</div><div class="line">&#125;, <span class="number">2000</span>);</div><div class="line">list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(item);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sayHello = <span class="function"><span class="params">name</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, name);</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Loaded'</span>), <span class="number">2000</span>);</div><div class="line">list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item));</div></pre></td></tr></table></figure></p>
<h1 id="隐示返回值"><a href="#隐示返回值" class="headerlink" title="隐示返回值"></a>隐示返回值</h1><p>这也是ES6的箭头函数的语法。</p>
<p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcCircumference</span>(<span class="params">diameter</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * diameter</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">calcCircumference = <span class="function"><span class="params">diameter</span> =&gt;</span> (</div><div class="line">  <span class="built_in">Math</span>.PI * diameter;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<h1 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h1><p>ES6的支持。</p>
<p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">volume</span>(<span class="params">l, w, h</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (w === <span class="literal">undefined</span>)</div><div class="line">    w = <span class="number">3</span>;</div><div class="line">  <span class="keyword">if</span> (h === <span class="literal">undefined</span>)</div><div class="line">    h = <span class="number">4</span>;</div><div class="line">  <span class="keyword">return</span> l * w * h;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">volume = <span class="function">(<span class="params">l, w = <span class="number">3</span>, h = <span class="number">4</span> </span>) =&gt;</span> (l * w * h);</div><div class="line">volume(<span class="number">2</span>) <span class="comment">//output: 24</span></div></pre></td></tr></table></figure></p>
<h1 id="模板字面量"><a href="#模板字面量" class="headerlink" title="模板字面量"></a>模板字面量</h1><p>ES6的支持。</p>
<p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> welcome = <span class="string">'You have logged in as '</span> + first + <span class="string">' '</span> + last + <span class="string">'.'</span></div><div class="line"><span class="keyword">const</span> db = <span class="string">'http://'</span> + host + <span class="string">':'</span> + port + <span class="string">'/'</span> + database;</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> welcome = <span class="string">`You have logged in as <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>`</span>;</div><div class="line"><span class="keyword">const</span> db = <span class="string">`http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>/<span class="subst">$&#123;database&#125;</span>`</span>;</div></pre></td></tr></table></figure></p>
<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><p>ES6的支持。</p>
<p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> observable = <span class="built_in">require</span>(<span class="string">'mobx/observable'</span>);</div><div class="line"><span class="keyword">const</span> action = <span class="built_in">require</span>(<span class="string">'mobx/action'</span>);</div><div class="line"><span class="keyword">const</span> runInAction = <span class="built_in">require</span>(<span class="string">'mobx/runInAction'</span>);</div><div class="line"><span class="keyword">const</span> store = <span class="keyword">this</span>.props.store;</div><div class="line"><span class="keyword">const</span> form = <span class="keyword">this</span>.props.form;</div><div class="line"><span class="keyword">const</span> loading = <span class="keyword">this</span>.props.loading;</div><div class="line"><span class="keyword">const</span> errors = <span class="keyword">this</span>.props.errors;</div><div class="line"><span class="keyword">const</span> entity = <span class="keyword">this</span>.props.entity;</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; observable, action, runInAction &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</div><div class="line"><span class="keyword">const</span> &#123; store, form, loading, errors, entity &#125; = <span class="keyword">this</span>.props;</div></pre></td></tr></table></figure></p>
<h1 id="字符串换行"><a href="#字符串换行" class="headerlink" title="字符串换行"></a>字符串换行</h1><p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> lorem = <span class="string">'Lorem ipsum dolor sit amet, consectetur\n\t'</span></div><div class="line">    + <span class="string">'adipisicing elit, sed do eiusmod tempor incididunt\n\t'</span></div><div class="line">    + <span class="string">'ut labore et dolore magna aliqua. Ut enim ad minim\n\t'</span></div><div class="line">    + <span class="string">'veniam, quis nostrud exercitation ullamco laboris\n\t'</span></div><div class="line">    + <span class="string">'nisi ut aliquip ex ea commodo consequat. Duis aute\n\t'</span></div><div class="line">    + <span class="string">'irure dolor in reprehenderit in voluptate velit esse.\n\t'</span></div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> lorem = <span class="string">`Lorem ipsum dolor sit amet, consectetur</span></div><div class="line">    adipisicing elit, sed do eiusmod tempor incididunt</div><div class="line">    ut labore et dolore magna aliqua. Ut enim ad minim</div><div class="line">    veniam, quis nostrud exercitation ullamco laboris</div><div class="line">    nisi ut aliquip ex ea commodo consequat. Duis aute</div><div class="line">    irure dolor in reprehenderit in voluptate velit esse.`</div></pre></td></tr></table></figure></p>
<h1 id="…操作符"><a href="#…操作符" class="headerlink" title="…操作符"></a>…操作符</h1><p>ES6的支持。</p>
<p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// joining arrays</span></div><div class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">const</span> nums = [<span class="number">2</span> ,<span class="number">4</span> , <span class="number">6</span>].concat(odd);</div><div class="line"><span class="comment">// cloning arrays</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">const</span> arr2 = arr.slice()</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// joining arrays</span></div><div class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> ];</div><div class="line"><span class="keyword">const</span> nums = [<span class="number">2</span> ,<span class="number">4</span> , <span class="number">6</span>, ...odd];</div><div class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// [ 2, 4, 6, 1, 3, 5 ]</span></div><div class="line"><span class="comment">// cloning arrays</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">const</span> arr2 = [...arr];</div></pre></td></tr></table></figure></p>
<p>或者这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> ];</div><div class="line"><span class="keyword">const</span> nums = [<span class="number">2</span>, ...odd, <span class="number">4</span> , <span class="number">6</span>];</div></pre></td></tr></table></figure></p>
<p>这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; a, b, ...z &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(z) <span class="comment">// &#123; c: 3, d: 4 &#125;</span></div></pre></td></tr></table></figure></p>
<p>在ES6之前可能就要用到Array.concat和Object.Assign，但是没那么方便。</p>
<h1 id="强制参数"><a href="#强制参数" class="headerlink" title="强制参数"></a>强制参数</h1><p>默认情况下，如果没有对函数的参数传入值，JavaScript将函数的参数设置为undefined，所以很多情况下会对函数的参数<br>进行检测。</p>
<p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(bar === <span class="literal">undefined</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing parameter!'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mandatory = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing parameter!'</span>);</div><div class="line">&#125;</div><div class="line">foo = <span class="function">(<span class="params">bar = mandatory(</span>)) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"><span class="built_in">Array</span>.find</div></pre></td></tr></table></figure></p>
<p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> pets = [</div><div class="line">  &#123; <span class="attr">type</span>: <span class="string">'Dog'</span>, <span class="attr">name</span>: <span class="string">'Max'</span>&#125;,</div><div class="line">  &#123; <span class="attr">type</span>: <span class="string">'Cat'</span>, <span class="attr">name</span>: <span class="string">'Karl'</span>&#125;,</div><div class="line">  &#123; <span class="attr">type</span>: <span class="string">'Dog'</span>, <span class="attr">name</span>: <span class="string">'Tommy'</span>&#125;,</div><div class="line">]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findDog</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;pets.length; ++i) &#123;</div><div class="line">    <span class="keyword">if</span>(pets[i].type === <span class="string">'Dog'</span> &amp;&amp; pets[i].name === name) &#123;</div><div class="line">      <span class="keyword">return</span> pets[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pet = pets.find(<span class="function"><span class="params">pet</span> =&gt;</span> pet.type ===<span class="string">'Dog'</span> &amp;&amp; pet.name === <span class="string">'Tommy'</span>);</div><div class="line"><span class="built_in">console</span>.log(pet); <span class="comment">// &#123; type: 'Dog', name: 'Tommy' &#125;</span></div><div class="line">Obejct[key]</div></pre></td></tr></table></figure></p>
<p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">values</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!values.first)</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">if</span>(!values.last)</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(validate(&#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>,<span class="attr">last</span>:<span class="string">'Wayne'</span>&#125;)); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// object validation rules</span></div><div class="line"><span class="keyword">const</span> schema = &#123;</div><div class="line">  <span class="attr">first</span>: &#123;</div><div class="line">    <span class="attr">required</span>:<span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">last</span>: &#123;</div><div class="line">    <span class="attr">required</span>:<span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// universal validation function</span></div><div class="line"><span class="keyword">const</span> validate = <span class="function">(<span class="params">schema, values</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">for</span>(field <span class="keyword">in</span> schema) &#123;</div><div class="line">    <span class="keyword">if</span>(schema[field].required) &#123;</div><div class="line">      <span class="keyword">if</span>(!values[field]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(validate(schema, &#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>&#125;)); <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(validate(schema, &#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>,<span class="attr">last</span>:<span class="string">'Wayne'</span>&#125;)); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h1 id="Double-Bitwise-NOT"><a href="#Double-Bitwise-NOT" class="headerlink" title="Double Bitwise NOT"></a>Double Bitwise NOT</h1><p><strong>Longhand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.floor(<span class="number">4.9</span>) === <span class="number">4</span>  <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p><strong>Shorthand:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~~<span class="number">4.9</span> === <span class="number">4</span>  <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[librdkafka源码分析]]></title>
      <url>/2017/04/16/librdkafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a href="https://github.com/edenhill/librdkafka" target="_blank" rel="external">librdkafka</a>是Apache Kafka的一个C/C++客户端。里面包含了一个C的客户端和一个封装C的C++客户端。两者总的代码行数超过3万行。算起来也是不小。</p>
<p>我准备从以下几个方面入手，简单分析下C客户端代码的整体结构与线程模型。</p>
<ul>
<li>线程模型</li>
<li>几种重要的队列（queue）</li>
<li>主要分析Consumer的执行流</li>
</ul>
<p>未涉及的包括：</p>
<ul>
<li>Producer的执行流</li>
<li>数据交互的格式以及打包与解包</li>
<li>Client group</li>
</ul>
<p>大部分代码都是以C编写的，从我阅读后来看，整体的代码编写风格很随意，没有固定的代码风格。这可能也会在阅读过程中增加一点难度，第二是C风格的代码免不了宏，因此在分析的时候需要逐一分析，这样代码的上下文很容易丢失。</p>
<p>阅读的代码为windows平台。</p>
<h1 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h1><p>有以下几个线程：</p>
<h2 id="主处理线程"><a href="#主处理线程" class="headerlink" title="主处理线程"></a>主处理线程</h2><p>当调用<code>rd_kafka_new</code>时，会传入创建<code>rd_kafka_t</code>对象的类型，也就是<code>RD_KAFKA_CONSUMER</code>或者<code>RD_KAFKA_PRODUCER</code>。之后会调用<code>rd_kafka_cgrp_new</code>创建<code>rd_kafka_cgrp_t</code>对象，接着就是创建主处理线程，线程的入口为<code>rd_kafka_thread_main</code>。</p>
<p><code>rd_kafka_thread_main</code>中会从<code>rd_kafka_t</code>对象中的操作队列<code>rk_ops</code>中逐一取出进行操作。操作的数据结构类型为<code>rd_kafka_op_t</code>。操作类型有很多种，参考<code>rd_kafka_op_type_t</code>。操作执行完后调用<code>rd_kafka_op_handle</code>回调。</p>
<p>这是<code>rd_kafka_thread_main</code>线程的主要工作，其中有一些细节这里未涉及。</p>
<h2 id="Broker线程"><a href="#Broker线程" class="headerlink" title="Broker线程"></a>Broker线程</h2><p>上述<code>rd_kafka_thread_main</code>线程创建完后，调用<code>rd_kafka_broker_add</code>创建internal broker线程。broker线程的类型有三种，分别是：</p>
<ul>
<li><p>RD_KAFKA_CONFIGURED</p>
<p>根据用户配置，生成的broker线程</p>
</li>
<li><p>RD_KAFKA_LEARNED</p>
<p>内部使用的broker线程，主要针对Client Group使用</p>
</li>
<li><p>RD_KAFKA_INTERNAL</p>
<p>内部使用的broker线程</p>
</li>
</ul>
<p>Broker线程主要执行的是针对Broker的当前内部状态，比如INIT、DOWN、CONNECT、UP等，在这些状态下，执行针对的操作。比如在<code>RD_KAFKA_BROKER_STATE_UP</code>状态下，根据<code>rk_type</code>（类型为<code>rd_kafka_type_t</code>）来执行<code>rd_kafka_broker_producer_serve</code>或者<code>rd_kafka_broker_consumer_serve</code>。</p>
<p>Broker线程可能会有多个。</p>
<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列在librdkafka的数据流转中起到了关键性的作用。主要有：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">rd_kafka_q_t</span> *rktp_ops;</div><div class="line"><span class="keyword">rd_kafka_q_t</span> *rktp_fetchq;</div><div class="line"><span class="keyword">rd_kafka_q_t</span> *rkcg_q;</div><div class="line"><span class="keyword">rd_kafka_q_t</span> *rk_rep;</div><div class="line"><span class="keyword">rd_kafka_q_t</span> *rkcg_q;</div></pre></td></tr></table></figure></p>
<p>buf队列有以下几个：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">rd_kafka_bufq_t</span> rkb_outbufs;</div><div class="line"><span class="keyword">rd_kafka_bufq_t</span> rkb_waitresps;</div><div class="line"><span class="keyword">rd_kafka_bufq_t</span> rkb_retrybufs;</div></pre></td></tr></table></figure></p>
<p>在创建<code>rd_kafka_cgrp_t</code>对象时，将<code>rkcg_q</code>设置为<code>rk_rep</code>的转发队列（forward queue）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rd_kafka_q_fwd_set(rk-&gt;rk_rep, rkcg-&gt;rkcg_q);</div></pre></td></tr></table></figure></p>
<p>在线程<code>rd_kafka_broker_thread_main</code>里，调用<code>rd_kafka_toppar_op_fetch_start</code>设置<code>rktp_fetchq</code>的转发queue为<code>rkcg_q</code>。</p>
<p>在Broker线程中，rd_kafka_fetch_reply_handle会创建一个临时的queue，然后创建一个rko，将rko压入到临时队列的rkq_q对象中。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rd_kafka_q_enq(rkq, rko)</div></pre></td></tr></table></figure></p>
<p>最后将这个临时queue压入到<code>rd_kafka_toppar_s::rktp_fetchq</code>的转发queue中，也就是rkcg_q。</p>
<p>Broker 线程会调用<code>rd_kafka_broker_consumer_serve</code>，然后到<code>rd_kafka_broker_fetch_toppars</code>构建一个<code>rd_kafka_buf_t *</code>对象，同时将此对象的<code>rkbuf_cb</code>设置为<code>rd_kafka_broker_fetch_reply</code>。然后将buf压入到broker的<code>rkb_outbufs</code>队列中。</p>
<p>在<code>rd_kafka_send</code>会从<code>rkb_outbufs</code>获取buf发送之后，会将此buf压入到<code>rkb_waitresps</code>队列中。</p>
<p>收到回应后，会调用<code>rkbuf_cb</code>会被调用<code>rd_kafka_buf_callback</code>的request，就是rkbuf。<code>rkb-&gt;rkb_waitresps</code>的<code>rkbq_bufs</code>中，通过corrid查找相应的<code>rd_kafka_buf_t</code>对象找到后更新状态。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rd_kafka_bufq_deq(&amp;rkb-&gt;rkb_waitresps, rkbuf);</div></pre></td></tr></table></figure>
<h1 id="Consumer执行流"><a href="#Consumer执行流" class="headerlink" title="Consumer执行流"></a>Consumer执行流</h1><p>消费者主动去poll消息</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rd_kafka_consume0(rk, rkcg-&gt;rkcg_q, timeout_ms);</div></pre></td></tr></table></figure>
<p><code>rkcg_q</code>就是<code>rk_rep</code>的转发queue。从<code>rkcg_q</code>取出一个<code>rd_kafka_op_t</code>对象，再从<code>rd_kafka_op_t</code>对象中取得消息（<code>rd_kafka_message_t</code>）。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个库的代码结构相对来说还是比较复杂的。上面的分析也很粗糙，有很多细节没有说明。但是大方向有了，其他的细节相分析起来，就会游刃有余，而不是毫无头绪。<br>这个库有一点不好的是队列的转发操作，说白了就是互相保存对象地址，然后在其他地方操作，所以不是很直观。在没弄清楚的情况会让人摸不着头脑。<br>一般我自己在阅读源码时，会遵循以下几个步骤：</p>
<ul>
<li>有一个可运行的示例</li>
<li>理解线程模型</li>
<li>大致阅读相关数据结构</li>
<li>将示例的执行流串起来</li>
<li>抓包查看如何通讯</li>
</ul>
<p>然后与以往看过的源码进行一个对比。从代码风格，代码格式化，代码的数据结构，API等方面进行比较。</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CPP </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[防火墙、VPN与MTU]]></title>
      <url>/2017/04/09/%E9%98%B2%E7%81%AB%E5%A2%99%E3%80%81VPN%E4%B8%8EMTU/</url>
      <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>因为行业原因，之前理解中的软件都是跑在局域网内，数据的传输至少不会遇上网络方面的原因，除去一些硬件等物理因素。这是常规的用法，测试团队也是基于这样的网络环境进行测试，也包括防火墙。</p>
<p>编程方面有一句名言：</p>
<blockquote>
<p>永远不要假设编程。</p>
</blockquote>
<p>我所理解的是，除去我们能够想到的（也就是我们假设的）正常case外，应该尽量地考虑其他case，包括边界case和环境因素。恰恰大部分人（有些时候包括我自己）平常所进行的都是假设编程。</p>
<p>工程团队的一个现场：一个调控中心（称为C），多个采集站（称为S）。C和S是异地，中间有防火墙，数据通过VPN走公网。<br>当时是10个采集站。报告说有几个站数据一直时好时坏。</p>
<p>远程登录后，用procexp看了下，有几个站在进行疯狂的重连（用的是TCP协议）。一个链路建立没多久就被关闭，然后又新建一个链路。第一反应是感觉很蹊跷，想到的是会不会超时时间过短？在前面一个链路未完全建立的情况下超时了，导致主动断开又重连。</p>
<p>但是反过来又说不通，因为其他几个站的数据完好，且用的是同样的超时时间。（正因为上述的假设，没考虑到网络延时因素）后来用wireshark抓包看了下，有些情况下是采集站主动关闭链路，有些时候又不是。其中有个规律是，采集站主动关闭的前一刻，有个超大的数据包从C发往S。而这种情况在数据好的采集站中未发现过。</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>经过后续的询问与调查，发现C与S数据未通的几个站的网络延时相对来说非常高，基本在150ms以上。可以确定是C这端的数据粘连成一个很大的数据包，这个很大的数据通过防火墙后，被防火墙丢弃了，因为数据包大小超过了MTU值。导致S端认为链路出现了状况，进行了主动关闭。<br>关于走VPN导致数据不稳定的情况，网上有很多帖子。情况基本一致。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>方法就是调整MTU的值。防火墙的设置基本是固定的，1500。所以能想到的是改变主机的MTU。<br>以下是在Windows平台的操作。<br>首先是找到发包相应的网络适配器名称：<br>netsh interface ipv4 show subinterface</p>
<p>找到名称后，进行修改：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netsh interface ipv4 <span class="built_in">set</span> subinterface “网络A” mtu = <span class="number">1400</span> store=persistent</div></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>基于很多现实原因，测试环境无法和真实的生产环境一致，以及大部分时候开发人员的假设编程等情况。综合各种情况，在特定的场景中会一些我们无法预料的到情况。反过来看，从各种意外状况，需要反省，不管是测试用例，测试场景还是开发时的思维模式。因为这些都是正反馈，有反馈才能有目的的改善。</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python的ctype与dll的交互2]]></title>
      <url>/2017/03/12/python%E7%9A%84ctype%E4%B8%8Edll%E7%9A%84%E4%BA%A4%E4%BA%922/</url>
      <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p><a href="http://codingeek.me/2017/01/22/python%E7%9A%84ctype%E4%B8%8Edll%E7%9A%84%E4%BA%A4%E4%BA%92/" target="_blank" rel="external">上一篇</a>文章说了python与dll交互间的数据结构问题。这篇文章说下dll中的回调问题。介绍python的c回调的文章网上有很多，但很多都是无法工作。因此在此记录下整个过程。</p>
<h1 id="C的回调"><a href="#C的回调" class="headerlink" title="C的回调"></a>C的回调</h1><p>通常c写的回调都是类似这样的结构：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">struct A_s</div><div class="line">&#123;</div><div class="line">	const char* a1;</div><div class="line">	unsigned int a2;</div><div class="line">&#125;;</div><div class="line">typedef struct A_s A_t;</div><div class="line">TESTDLL_API int function1(void (*outputcallback)(const A_t* a, void* b), void* param);</div></pre></td></tr></table></figure>
<p>在c或者C++中调用的话，第一个参数可以传入一个签名匹配到回调的方法或者lambda对象（Lambda参考<a href="http://codingeek.me/2017/03/04/Callback-in-C-and-C/" target="_blank" rel="external">这篇</a>）。</p>
<h1 id="python的回调"><a href="#python的回调" class="headerlink" title="python的回调"></a>python的回调</h1><p>在python中，需要定义相应的数据结构，接下来就是回调的原型定义。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Structure)</span>:</span></div><div class="line">    _fields_ = [</div><div class="line">        (<span class="string">"a1"</span>, c_char_p),</div><div class="line">        (<span class="string">"a2"</span>, c_int)]</div><div class="line">CMPFUNC = CFUNCTYPE(<span class="keyword">None</span>, POINTER(A), c_void_p)</div></pre></td></tr></table></figure>
<p>CFUNCTYPE的第一个参数是回调的返回值，接下是回调的参数。有一点需要注意的是，任何传入c接口的参数都是ctypes类型，而不是python的内置内类。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.dllModule.function1(self.cb, c_int(<span class="number">10</span>))</div></pre></td></tr></table></figure>
<p>回调中的第一个参数是一个对象，这个对象包含了一个contents字段，在这个字段中才是我们自定义的字段。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        print(dir(a))</div><div class="line">        print(a.contents.a1, a.contents.a2)</div><div class="line">        print(b)</div></pre></td></tr></table></figure>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>源码在<a href="https://github.com/navono/blog_code/tree/master/python-callback" target="_blank" rel="external">这里</a></p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CPP </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Callback in C and C++]]></title>
      <url>/2017/03/04/Callback%20in%20C%20and%20C++/</url>
      <content type="html"><![CDATA[<h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>前面一段时间一直在看<a href="https://github.com/KjellKod/g3log" target="_blank" rel="external">g3log</a>和<a href="https://github.com/libuv/libuv" target="_blank" rel="external">libuv</a>的源码。在看完也写了点例子操作后，看到g3log里面只有<a href="https://github.com/navono/g3Log_Sinks" target="_blank" rel="external">FileSink</a>，因此想自己写一个SocketSink，这个版本实现只是功能上的实现。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>因为g3log是C++11开发的，但是libuv库又是一个C库，而且是大量使用回调的模式的事件驱动库。因此两者的结合看起来很奇怪。站在使用者角度，当然是使用C++11风格的好。但是在试过以下代码，发现C++11的Lambda好像和C的回调不是那么匹配。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">auto</span> connect_cb = [](<span class="keyword">uv_connect_t</span>* req, <span class="keyword">int</span> status) &#123;</div><div class="line">	uv_read_start((<span class="keyword">uv_stream_t</span>*)req-&gt;handle, on_alloc, on_read);</div><div class="line">&#125;;</div><div class="line">    </div><div class="line">uv_tcp_connect(&amp;con_req, client, (<span class="keyword">const</span> sockaddr*)&amp;addr, connect_cb);</div></pre></td></tr></table></figure>
<p>在VS2010中编译不通过，原因是因为Lambda在生成Closure的时候使用了上下文，而C的回调刚好和调用的上下文无关的。因此无法将function形式的函数转换成函数指针。但是在VS2015中则可以。</p>
<p>但是又存在另一个问题，就是如果想要将on_alloc和on_read也使用Lambda就会存在问题，因为在connect_cb内部使用的话：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">auto</span> alloc_cb = [](<span class="keyword">uv_handle_t</span>* handle, <span class="keyword">size_t</span> suggested_size, <span class="keyword">uv_buf_t</span>* buf) &#123;</div><div class="line">    buf-&gt;base = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(suggested_size);</div><div class="line">    buf-&gt;len = suggested_size;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">auto</span> connect_cb = [](<span class="keyword">uv_connect_t</span>* req, <span class="keyword">int</span> status) &#123;</div><div class="line">    uv_read_start((<span class="keyword">uv_stream_t</span>*)req-&gt;handle, alloc_cb, on_read);</div><div class="line">&#125;;</div><div class="line">uv_tcp_connect(&amp;con_req, client, (<span class="keyword">const</span> sockaddr*)&amp;addr, connect_cb);</div></pre></td></tr></table></figure>
<p>就需要capture为引用或者拷贝，这样就导致了在使用<em>connect_cb</em>会报出类似：</p>
<blockquote>
<p>error C3493: ‘alloc_cb’ cannot be implicitly captured because no default capture mode has been specified </p>
<p>error C2664: ‘int uv_tcp_connect(uv_connect_t ,uv_tcp_t ,const sockaddr *,uv_connect_cb)’: cannot convert argument 4 from ‘int’ to ‘uv_connect_cb’</p>
</blockquote>
<p>这样的错误。但是在connect_cb中使用[&amp;] capture，又会导致</p>
<blockquote>
<p>error C2664: ‘int uv_tcp_connect(uv_connect_t ,uv_tcp_t ,const sockaddr *,uv_connect_cb)’: cannot convert argument 4 from ‘run_tcp_client::‘ to ‘uv_connect_cb’</p>
</blockquote>
<p>陷入了两难境地。google了一把，就想将一些东西记录在这。</p>
<h1 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h1><h2 id="传统方案"><a href="#传统方案" class="headerlink" title="传统方案"></a>传统方案</h2><p>大部分想到的是传统方案，也就是使用接口类。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//------------------------------------------------------------------------</span></div><div class="line"><span class="comment">// Abstract Base Class</span></div><div class="line"><span class="comment">// Those who want to provide a callback must derive from this class and</span></div><div class="line"><span class="comment">// provide an implementation of cbiCallbackFunction().</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallbackInterface</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// The prefix "cbi" is to prevent naming clashes.</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">cbiCallbackFunction</span><span class="params">(<span class="keyword">int</span>)</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//------------------------------------------------------------------------</span></div><div class="line"><span class="comment">// "Caller" allows a callback to be connected.  It will call that callback.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caller</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// Clients can connect their callback with this</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connectCallback</span><span class="params">(CallbackInterface *cb)</span></span></div><div class="line">    &#123;</div><div class="line">        m_cb = cb;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Test the callback to make sure it works.</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Caller::test() calling callback...\n"</span>);</div><div class="line">        <span class="keyword">int</span> i = m_cb -&gt; cbiCallbackFunction(<span class="number">10</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Result (20): %d\n"</span>, i);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="comment">// The callback provided by the client via connectCallback().</span></div><div class="line">    CallbackInterface *m_cb;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//------------------------------------------------------------------------</span></div><div class="line"><span class="comment">// "Callee" can provide a callback to Caller.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Callee</span> :</span> <span class="keyword">public</span> CallbackInterface</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// The callback function that Caller will call.</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cbiCallbackFunction</span><span class="params">(<span class="keyword">int</span> i)</span>  </span></div><div class="line">    &#123; </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"  Callee::cbiCallbackFunction() inside callback\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span> * i; </div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//------------------------------------------------------------------------</span></div></pre></td></tr></table></figure></p>
<p>使用方法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Caller caller;</div><div class="line">Callee callee;</div><div class="line"><span class="comment">// Connect the callback</span></div><div class="line">caller.connectCallback(&amp;callee);</div><div class="line"><span class="comment">// Test the callback</span></div><div class="line">caller.test();</div></pre></td></tr></table></figure></p>
<p><strong>优点：</strong></p>
<ul>
<li>如果要处理多个回调，可以直接往接口类里添加</li>
<li>清晰简单</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>接口可能存在名字冲突</li>
<li>只能继承一次</li>
</ul>
<h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//------------------------------------------------------------------------</span></div><div class="line"><span class="comment">// Callback function pointer.</span></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*CallbackFunctionPtr)</span><span class="params">(<span class="keyword">void</span>*, <span class="keyword">int</span>)</span></span>;</div><div class="line"><span class="comment">//------------------------------------------------------------------------</span></div><div class="line"><span class="comment">// "Caller" allows a callback to be connected.  It will call that callback.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caller</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// Clients can connect their callback with this.  They can provide</span></div><div class="line">    <span class="comment">// an extra pointer value which will be included when they are called.</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connectCallback</span><span class="params">(CallbackFunctionPtr cb, <span class="keyword">void</span> *p)</span></span></div><div class="line">    &#123;</div><div class="line">        m_cb = cb;</div><div class="line">        m_p = p;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Test the callback to make sure it works.</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Caller::test() calling callback...\n"</span>);</div><div class="line">        <span class="keyword">int</span> i = m_cb(m_p, <span class="number">10</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Result (20): %d\n"</span>, i);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="comment">// The callback provided by the client via connectCallback().</span></div><div class="line">    CallbackFunctionPtr m_cb;</div><div class="line">    <span class="comment">// The additional pointer they provided (it's "this").</span></div><div class="line">    <span class="keyword">void</span> *m_p;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//------------------------------------------------------------------------</span></div><div class="line"><span class="comment">// "Callee" can provide a callback to Caller.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Callee</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// This static function is the real callback function.  It's compatible</span></div><div class="line">    <span class="comment">// with the C-style CallbackFunctionPtr.  The extra void* is used to</span></div><div class="line">    <span class="comment">// get back into the real object of this class type.</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">staticCallbackFunction</span><span class="params">(<span class="keyword">void</span> *p, <span class="keyword">int</span> i)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Get back into the class by treating p as the "this" pointer.</span></div><div class="line">        ((Callee *)p) -&gt; callbackFunction(i);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// The callback function that Caller will call via </span></div><div class="line">    <span class="comment">// staticCallbackFunction() above.</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">callbackFunction</span><span class="params">(<span class="keyword">int</span> i)</span>  </span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"  Inside callback\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span> * i; </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>使用方法：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Caller caller;</div><div class="line">Callee callee;</div><div class="line"><span class="comment">// Connect the callback.  Send the "this" pointer for callee as the </span></div><div class="line"><span class="comment">// void* parameter.</span></div><div class="line">caller.connectCallback(Callee::staticCallbackFunction, &amp;callee);</div><div class="line"><span class="comment">// Test the callback</span></div><div class="line">caller.test();</div></pre></td></tr></table></figure>
<p><strong>优点：</strong></p>
<ul>
<li>和C风格的回调兼容</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>实现优点复杂，优点绕</li>
</ul>
<h2 id="C-11-Lambda"><a href="#C-11-Lambda" class="headerlink" title="C++11 Lambda"></a>C++11 Lambda</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Callee</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Callee(<span class="keyword">int</span> i) : m_i(i) &#123; &#125;</div><div class="line">    <span class="comment">// The callback function that Caller will call.</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">callbackFunction</span><span class="params">(<span class="keyword">int</span> i)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"  Callee::callbackFunction() inside callback\n"</span>);</div><div class="line">        <span class="keyword">return</span> m_i * i; </div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="comment">// To prove "this" is indeed valid within callbackFunction().</span></div><div class="line">    <span class="keyword">int</span> m_i;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//------------------------------------------------------------------------</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; CallbackFunction;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caller</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// Clients can connect their callback with this.</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connectCallback</span><span class="params">(CallbackFunction cb)</span></span></div><div class="line">    &#123;</div><div class="line">        m_cb = cb;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Test the callback to make sure it works.</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Caller::test() calling callback...\n"</span>);</div><div class="line">        <span class="keyword">int</span> i = m_cb(<span class="number">10</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Result (50): %d\n"</span>, i);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="comment">// The callback provided by the client via connectCallback().</span></div><div class="line">    CallbackFunction m_cb;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>使用方法：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Caller caller;</div><div class="line"><span class="function">Callee <span class="title">callee</span><span class="params">(<span class="number">5</span>)</span></span>;</div><div class="line"><span class="comment">// Connect the callback.  Like with the C-style function pointer and </span></div><div class="line"><span class="comment">// static function, we use a lambda to get back into the object.</span></div><div class="line">caller.connectCallback(</div><div class="line">    [&amp;callee](<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> callee.callbackFunction(i); &#125;);</div><div class="line"><span class="comment">// Test the callback</span></div><div class="line">caller.test();</div></pre></td></tr></table></figure>
<h2 id="模板函子"><a href="#模板函子" class="headerlink" title="模板函子"></a>模板函子</h2><p>实现<a href="http://www.tutok.sk/fastgl/callback.html" target="_blank" rel="external">在这</a>。可以用C++11的可变模板实现。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>最终要解决上述的问题是，要解决capture的问题。解决方案是引入一个“bounce”函数。解决上下文问题。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">auto</span><span class="comment">/*static std::function&lt;void(uv_connect_t* req, int status)&gt;*/</span> connect_bounce</div><div class="line">		= [&amp;](<span class="keyword">uv_connect_t</span>* req, <span class="keyword">int</span> status) &#123;</div><div class="line">		uv_read_start((<span class="keyword">uv_stream_t</span>*)req-&gt;handle, alloc_cb, read_cb);</div><div class="line">	&#125;;</div><div class="line"><span class="keyword">auto</span> connect_cb = [](<span class="keyword">uv_connect_t</span>* req, <span class="keyword">int</span> status) &#123;</div><div class="line">    connect_bounce(req, status);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样，alloc_cb和read_cb就可以使用正常的lambda了。</p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul>
<li><a href="http://tedfelix.com/software/c++-callbacks.html" target="_blank" rel="external">http://tedfelix.com/software/c++-callbacks.html</a></li>
<li><a href="http://www.alecjacobson.com/weblog/?p=3779" target="_blank" rel="external">http://www.alecjacobson.com/weblog/?p=3779</a></li>
<li><a href="https://www.cabbages-and-kings.net/2014/08/11/c_style_callbacks_with_c_functions.html" target="_blank" rel="external">https://www.cabbages-and-kings.net/2014/08/11/c_style_callbacks_with_c_functions.html</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CPP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[g3log源码分析]]></title>
      <url>/2017/02/17/g3log%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>源代码地址：<a href="https://github.com/KjellKod/g3log" target="_blank" rel="external">github</a></p>
<h1 id="代码量"><a href="#代码量" class="headerlink" title="代码量"></a>代码量</h1><p>[图片]</p>
<p>从代码量上看，代码不是很多，所以整个库的结构也不会太复杂。首先从整体上有个概念，就需要看下整个库的类结构如何，以及类间的关系如何。</p>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><h2 id="头文件结构"><a href="#头文件结构" class="headerlink" title="头文件结构"></a>头文件结构</h2><p>通过VS2015的头文件依赖图，从整体的头文件依赖结构上看下整个工程是如何依赖的。</p>
<p>[图片]</p>
<h2 id="主要类"><a href="#主要类" class="headerlink" title="主要类"></a>主要类</h2><p>首先是LogWorker，这是库的核心类，包含了创建LogWorker实例的静态方法：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;LogWorker&gt; createLogWorker();</div></pre></td></tr></table></figure>
<p>以及构建本地log日志文件信息和Sink的方法：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;FileSinkHandle&gt; addDefaultLogger(</div><div class="line">		   <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; log_prefix, </div><div class="line">		   <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; log_directory, </div><div class="line">		   <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; default_id = <span class="string">"g3log"</span>);</div><div class="line">           </div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> DefaultLogCall&gt;</div><div class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;g3::SinkHandle&lt;T&gt;&gt; addSink(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;T&gt; real_sink, DefaultLogCall call);</div></pre></td></tr></table></figure>
<p>最后就是保存日志的两个方法，一个是正常的保存，一个是异常的保存：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(LogMessagePtr entry)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fatal</span><span class="params">(FatalMessagePtr fatal_message)</span></span>;</div></pre></td></tr></table></figure>
<p>内部还有一个私有的实现impl：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LogWorkerImpl _impl;</div></pre></td></tr></table></figure>
<p>LogWorkerImpl内部保存了Sink的的列表，以及一个C++11线程的Active对象。也是这个log库号称异步的原因。<br>线程的Active实现如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>() &gt; Callback;</div><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Active</span> &#123;</span></div><div class="line">   <span class="keyword">private</span>:</div><div class="line">      Active() : done_(<span class="literal">false</span>) &#123;&#125; <span class="comment">// Construction ONLY through factory createActive();</span></div><div class="line">      Active(<span class="keyword">const</span> Active &amp;) = <span class="keyword">delete</span>;</div><div class="line">      Active &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> Active &amp;) = <span class="keyword">delete</span>;</div><div class="line">      <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">         <span class="keyword">while</span> (!done_) &#123;</div><div class="line">            Callback func;</div><div class="line">            mq_.wait_and_pop(func);</div><div class="line">            func();</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">      shared_queue&lt;Callback&gt; mq_;</div><div class="line">      <span class="built_in">std</span>::thread thd_;</div><div class="line">      <span class="keyword">bool</span> done_;</div><div class="line">   <span class="keyword">public</span>:</div><div class="line">      <span class="keyword">virtual</span> ~Active() &#123;</div><div class="line">         send([<span class="keyword">this</span>] &#123; done_ = <span class="literal">true</span>;&#125;);</div><div class="line">         thd_.join();</div><div class="line">      &#125;</div><div class="line">      <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(Callback msg_)</span> </span>&#123;</div><div class="line">         mq_.push(msg_);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">/// Factory: safe construction of object before thread start</span></div><div class="line">      <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Active&gt; createActive() &#123;</div><div class="line">         <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Active&gt; aPtr(<span class="keyword">new</span> Active());</div><div class="line">         aPtr-&gt;thd_ = <span class="built_in">std</span>::thread(&amp;Active::run, aPtr.get());</div><div class="line">         <span class="keyword">return</span> aPtr;</div><div class="line">      &#125;</div><div class="line">   &#125;;</div></pre></td></tr></table></figure>
<p>整体的思路就是维护一个消息queue，然后在run中不停地从queue中取对象执行。当queue中没有消息时，run会等待在mq_.wait_and_pop(func)这里。</p>
<p>LogWorker的save和fatal是将消息转发给LogWorkerImpl的后台线程去执行，具体执行的是LogWorkerImpl的bgSave和bgFatal。而这两个方法最后都会传递给Sink<t>的实例的send去执行。接下来就是Sink的具体实现。源码中只实现了FileSink，也就是将日志消息保存到本地文件中。这个类的内部的fileWrite方法也是Thread Active最终要执行的执行体。</t></p>
<p>这里有个需要注意的地方。就是内部使用的Sink都是被封装成模板类Sink<t>（继承SinkWrapper接口）的实例，Sink<t>本身有两个方法：</t></t></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void send(LogMessageMover msg) override；</div><div class="line">template&lt;typename Call, typename... Args&gt;</div><div class="line">auto async(Call call, Args &amp;&amp;... args)-&gt; std::future&lt; typename std::result_of&lt;decltype(call)(T, Args...)&gt;::type&gt;();</div></pre></td></tr></table></figure>
<p>以及一个函数对象_default_log_call：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(LogMessageMover) &gt; AsyncMessageCall;</div><div class="line">AsyncMessageCall _default_log_call;</div></pre></td></tr></table></figure></p>
<p>保存的是最初传入的FileSink::fileWrite。</p>
<p>第一个方法是对SinkWrapper接口API的实现。而第二个方法则是返回给用户用于异步调用的。也就是SinkHandle<t>，其中的T就是Sink<t>。最后Sink<filesink>保存在LogWorkerImpl的std::vector _sinks中。</filesink></t></t></p>
<p>最后一个就是LOG宏中用到的LogCapture。此类中包含了一条log日志的所有信息：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">std::ostringstream _stream;</div><div class="line">std::string _stack_trace;</div><div class="line"><span class="keyword">const</span> char *_file;</div><div class="line"><span class="keyword">const</span> int _line;</div><div class="line"><span class="keyword">const</span> char *_function;</div><div class="line"><span class="keyword">const</span> LEVELS &amp;_level;</div><div class="line"><span class="keyword">const</span> char *_expression;</div><div class="line"><span class="keyword">const</span> g3::SignalType _fatal_signal;</div></pre></td></tr></table></figure>
<p>在析构时，调用全局的：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">saveMessage(_stream.str().c_str(), _file, _line, _function, _level, _expression, _fatal_signal, _stack_trace.c_str());</div></pre></td></tr></table></figure>
<p>进行日志保存。</p>
<h2 id="全局方法"><a href="#全局方法" class="headerlink" title="全局方法"></a>全局方法</h2><p>包含以下几个全局设置的方法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void initializeLogging(LogWorker *logger);</div><div class="line">void setFatalPreLoggingHook(std::function&lt;void(void)&gt;  pre_fatal_hook);</div><div class="line">void setFatalExitHandler(std::function&lt;void(FatalMessagePtr)&gt; fatal_call);</div></pre></td></tr></table></figure>
<p>还有在namespace internal的：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveMessage</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *entry, <span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> line, <span class="keyword">const</span> <span class="keyword">char</span> *function, <span class="keyword">const</span> LEVELS &amp;level, <span class="keyword">const</span> <span class="keyword">char</span> *boolean_expression, <span class="keyword">int</span> fatal_signal, <span class="keyword">const</span> <span class="keyword">char</span> *stack_trace)</span></span></div></pre></td></tr></table></figure>
<h1 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h1><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">graph TB</div><div class="line">	 subgraph main</div><div class="line">        createLogWorker--&gt;addDefaultLogger</div><div class="line">        addDefaultLogger--&gt;initializeLogging</div><div class="line">        end</div><div class="line">        subgraph LogWorkerImpl</div><div class="line">        bgSave--&gt;sink'save</div><div class="line">        end</div><div class="line">        subgraph sink</div><div class="line">        sink_bg--&gt;_default_log_call</div><div class="line">        end</div><div class="line">        LOG--&gt;saveMessage</div><div class="line">        saveMessage--&gt;LogWork_save</div><div class="line">        LogWork_save-- async --&gt;bgSave</div><div class="line">        sink'save-- async --&gt;sink_bg</div></pre></td></tr></table></figure>
<p>不支持。。。Fu*k。</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CPP </tag>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZeroMQ理论基础]]></title>
      <url>/2017/02/12/ZeroMQ%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>不像其他（中心式）基于容易理解的理论基础的消息传输系统。 几乎没有关于通用式分布式消息传输系统的资源，尤其是读者特别感兴趣的ØMQ。</p>
<p>这篇论文的目的是解释ØMQ架构的基本元素，他们是如何相互协调以及他们这样设计的理由。</p>
<h1 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h1><p>拓扑结构是ØMQ的主要概念。除非你真正理解“拓扑结构”是什么意思，否则其中出现的一些概念导致混淆以及难于理解，甚至导致设计不当。</p>
<p>作为一个非正式的定义，我们可以把“拓扑结构”理解成参与到业务逻辑的相同的方面的一组应用程序。</p>
<p>例如：考虑一个图片转换服务，将图片调整到所需的大小和分辨率。所有的应用程序都提供了转换服务，所有的应用程序都使用服务。所有的中间节点，比如负载均衡，形成了一个拓扑结构。</p>
<p>从技术层面来说，拓扑结构有以下属性：</p>
<ul>
<li>拓扑是个图，图中的节点是应用程序，格子（lattices）是应用程序之间的数据通道。</li>
<li>所有的应用程序在业务逻辑方面都有一致的路线协议。</li>
<li>这个图是紧密连接的。也就是：任意两个节点要不是直接连通，要不就是通过其他中间节点间接连通。</li>
</ul>
<p>第一点很明显。有一点需要指出的是，“通道（channel）”一词是故意使用，用来替代“连接（connection）”，来描述这个模型，甚至底层是无连接的传输，比如IP多播或UDP。</p>
<p>第二点说的是，在拓扑结构中，所有的应用程序都有一致消息传输（比如“图片需要调整大小”或“这是一张调整过大小的图片”），一致的消息序列（在应用程序中以状态机实现），实际的数据编码（图片数如何序列化的？RGB？CMYK？）等等。</p>
<p>第三点说的是，即使是有两个相同业务逻辑的部署，他们形成的也是两个拓扑结构，除非他们通过数据通道进行相互连接。</p>
<p><img src="http://250bpm.wdfiles.com/local--files/concepts/concepts1.png" alt="topology1"></p>
<p>为了直观理解拓扑结构概念，重要的是理解fuzzy概念。同样fuzzy的是面向对象编程中的类。存在一个正式的定义解释类是数据成员和方法的集合。但是没有定义解释哪一部分的业务逻辑应该形成一个类，哪一部分不应该。完全依赖于程序员去决定哪个业务概念需要封装成类，哪个不需要。程序员可能会犯错，将所有的业务逻辑放到一个类中，因此几乎回避了面向对象设计；或者将逻辑分布到千万个小的类中，这就将程序员置于难以理解的相互关联的混乱之中。</p>
<p>同样地，没有一个单一的正确方式将业务逻辑划分到拓扑结构中。唯一的经验法则是，拓扑是扩展的原子单元。你可以将拓扑结构作为整体进行扩展，而不能只是扩展其某一方面。因此，如果你期待在将来需要将功能A与功能B相互独立，你应该直接为A单独创建一个拓扑结构，为B单独创建一个拓扑结构。</p>
<p>我们拿一个例子来阐述说明上述的概念：<br>在我们的图片转换程序中，有两个基本功能：调整图片大小和调整图片的亮度。我们可以选择将这两个功能创建一个拓扑，或者为每个功能创建“大小调整”拓扑和“亮度调整”拓扑。</p>
<p>前面这种场合，我们需要定义某种路线传输方式来传达我们想要的功能。比如说，消息的第一个字节为1代表“大小调整”,2代表“亮度调整”。同时我们应该注意的是，这种设计导致这两个功能是紧密耦合的。如果在将来我们打算增加更多的处理节点，他们的每一个都应该实现这两个功能。</p>
<p>后面这种场合，这两个功能是不相交的。在消息中，没有必要设置特殊的字段来代表选择的功能，在“大小调整”拓扑中，所有的请求都是请求调整图片大小，在“亮度调整”拓扑中，所有的请求都是请求调整图片亮度。在这个设计中，我们可以独立扩展每个拓扑结构而不影响其他的拓扑。假设我们想设计一个专用的FPGA来调整图片大小，我们可以简单地将它们连接到“大小调整”拓扑结构，而不影响“亮度调整”拓扑。如下图。</p>
<p><img src="http://250bpm.wdfiles.com/local--files/concepts/concepts2.png" alt="topology2"></p>
<p>客户端可以请求调整大小（通过拓扑A）和调整亮度（通过拓扑B），worker1只能调整图片大小，worker3只能调整图片亮度，而worker2可以提供调整图片大小和调整图片亮度两个功能。</p>
<p>最后关于拓扑结构要注意的是，由于很清晰地在拓扑结构之间进行了划分，就可以映射到底层的传输协议的某一方面，比如TCP端口。这就允许底层的网络按照业务规范其行为。比如，测量特定拓扑结构的带宽消耗（和特定的业务逻辑，比如调整图片大小服务的带宽消耗与调整图片亮度服务的带宽消耗）。可以基于拓扑结构进行流量调整。比如减少调整图片大小服务的带宽，用来增加调整图片亮度服务的带宽等等。</p>
<h1 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h1><p>经常会出现在不同的传输机制的上层，除了TCP之外，会要求运行一层消息层，比如InfiniBand（处于性能考虑），IP多播或者SCTP。<br>原生的方法是开启一个TCP传输，然后在此之上增加一些TCP缺少的特性，比如心跳。在其他的底层传输之上提供一个相同的行为。<br>这个方法有几个问题：</p>
<ul>
<li>首先，在特定的协议之上，构造一个类TCP的包装器会变得很冗余。如果它的行为类似TCP，那为何不一开始就用TCP。（这条规则排除因为性能的原因）</li>
<li>其次，一些协议不能硬塞进TCP模型中。例如：IP广播。</li>
</ul>
<p>基于上述特定的问题，ØMQ采用了不同的方案。底层的传输保持了各自的原生特性而不用提供一个共通的东西，在上层进行了一层封装。不同的是，ØMQ提供了一组最小的接口（消息界定，消息分割和消息原子性），同时要求上层足够的通用来处理底层各个不同的传输模式。<br>实际中，它意味着在传输层之上有一层很”薄”的封装。例如消息界定协议（当封装TCP的时候）、消息分割协议（将长的消息分割成多个基于包传输的数据包）或late-joiner协议（当加入PGM多播流的时候，丢弃接收到消息的最后一部分）</p>
<p><img src="http://250bpm.wdfiles.com/local--files/concepts/concepts5.png" alt="topology3"></p>
<h1 id="拓扑结构的建立-VS-消息路由"><a href="#拓扑结构的建立-VS-消息路由" class="headerlink" title="拓扑结构的建立 VS. 消息路由"></a>拓扑结构的建立 VS. 消息路由</h1><p>网络栈的每一层都将网络传输中的一部分复杂进行了抽象。IP层抽象掉了需要查找到路由的目标主机。TCP抽象掉了网络内在的丢包属性，提供了 可靠性保证。<br>ØMQ抽象掉了将要发送数据的需要指定的特定网络位置。消息被发送到拓扑结构中，而不是特定的一个端点。回忆一下，拓扑结构是和特定业务逻辑绑定的，这也就意味着，你从一个拓扑结构发送消息，你是要求这个拓扑结构给你提供特定的服务，比如是图片调整大小或者明亮度调整。ØMQ会以用户透明的方式选择一个真正的端点来接收消息。</p>
<p>为了落实这一原则，ØMQ严格区分了拓扑结构的建立（zmq_bind,zmq_connect）和实际消息的传输（zmq_send,zmq_recv）。<br>前者处理底层的传输地址，比如IP地址，后者使用一个句柄（fd）去访问特定的拓扑结构。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Topology establishment */</span></div><div class="line"><span class="keyword">int</span> s = zmq_socket (...);</div><div class="line">zmq_connect (s, <span class="string">"tcp://192.168.0.111:5555"</span>);</div><div class="line"><span class="comment">/* Message routing */</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> data [] = <span class="string">"ABC"</span>;</div><div class="line">zmq_send (s, data, <span class="keyword">sizeof</span> (data), <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>将拓扑结构的建立和消息的路由分开严格上说不是不可或缺的。毕竟，结合两个单一的函数很简单。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zmq_send (s, <span class="string">"tcp://192.168.0.111:5555"</span>, data, <span class="keyword">sizeof</span> (data), <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>区分开既有技术上的又有教育意义上的理由。技术上的理由是：</p>
<ul>
<li>当我们想以异步的方式从拓扑结构中接收消息时，无论如何我们必须连接到它。没有理由不继续利用这个通道进行消息的发送。</li>
<li>将拓扑结构的建立和消息路由分开可以很好地映射到BSD的socket API（bind/connect VS. send/recv）</li>
</ul>
<p>教育意义上的观点甚至更重要。它涉及到ØMQ是什么以及它不是什么。<br>底层的协议，例如TCP，允许用户向特定的端点发送数据。ØMQ是构建在此基础之上，允许用户向特定的拓扑结构发送数据而不是特定的端点。因此，如果你想要向特定的端点发送数据，你应该使用TCP或者类似的协议。如果你想要将数据发送到拓扑结构，让拓扑结构来决定数据的最终端点，你应该使用ØMQ。</p>
<p>不幸的是，这个概念似乎很难去理解。其实，几乎不可能去说服用户ØMQ不能用于处理特定的端点，这个不是个bug而是个特性。<br>将拓扑结构的建立和消息的路由分开没有解决这个问题，只是将实际的功能变得更显而易见。在这个特性中增加名称解析，希望能让事实变得更清晰。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">zmq_connect (s, <span class="string">"Brightness-Adjustment-Service"</span>);</div><div class="line">zmq_send (s, data, <span class="keyword">sizeof</span> (data), <span class="number">0</span>);</div></pre></td></tr></table></figure>
<h1 id="消息传输模式"><a href="#消息传输模式" class="headerlink" title="消息传输模式"></a>消息传输模式</h1><p>当谈及到拓扑结构作为消息路由的一种手段时，在不同的拓扑结构中的路由算法的区别就变得很清晰。“NASDAQ股票报价”拓扑结构将报价分布到拓扑中的每个消费者，“图片明亮度调整”拓扑结构将从客户端接收到的图片交给一个worker去转换，然后将调整过的图片发回给客户端。<br>ØMQ通过定义几种不同的“消息传输模式”来反应这个事实。前面这个股票报价拓扑结构，就是发布/订阅模式的一个例子。后面这个图片明亮度调节拓扑结构就是一个请求/回复模式的一个例子。</p>
<p>消息传输模式既定义了用于节点间的通信协议，又定义了各个独立节点的功能。e.g.用于路由消息的算法。因此，不同的模式行为看上去像不同的协议。你不能将发布/订阅节点和请求/回复节点进行连接，就好像将TCP端点不能连接到SCTP端点一样。每一个拓扑结构都只实现了一个单一的消息传输模式。不存在一种方法将两个不同的消息传输模式的拓扑结构连接成一个拓扑结构。<br>这个严格的区分对于拓扑结构作为一个整体来保证其行为是有必要的。只要你知道在拓扑结构中的每个端点都坚持提供发布/订阅语义，你就可以提供类似“消息会被投递在拓扑结构中的每个端点”的保证。如果拓扑结构的某一部分允许负载均衡而不是广播，你就不能做出上述那样的保证。更糟的是，消息传输模式是开放式的，你可能需要以一种完全任意的方式去扩展一个端点的行为，因此你没办法做出任何保证。<br>下面是网络栈的示意图。需要注意的是，不同的消息传输模式都位于栈的同一层且相互间是独立的。</p>
<p><img src="http://250bpm.wdfiles.com/local--files/concepts/concepts6.png" alt="topology4"></p>
<p>考虑到一些传统的消息传输系统选择提供通用的路由基础设施允许用户在此之上基本可以构建任意的路由算法（例如AMQP），而不是提供预包装的消息传递模式。所以有必要解释一下ØMQ选择后者的理由。</p>
<ul>
<li>第一，设计一个功能齐全又没有bug的消息传输模式是很困难的任务。通过将创建模式的责任转交给用户，我们可以保证基于此消息传输系统构建的大部分应用在某些方面是有问题的。即使是这个模式实现是正确的，学习和开发的开销的成本将会超过使用预包装的消息传递模式的成本的数倍。毕竟，在DNS设计方面的一篇早期论文中提及：“[用户]想要的是使用这个系统所提供的功能，而不是理解。”</li>
<li>第二，正式定义的模式允许执行一些需求，比如两个不同的模式不能在同一个拓扑结构中存在。消息传输系统可以检查对方是否也实现了相同的消息传输模式，如果不是则直接拒绝连接。如果由用户实现此类的模式，类似这样的检查很可能就不会存在。</li>
<li>第三，通用的路由基础设施不能自动地支持分布式（别名：federated），这意味着只在简单的中心辐射型（hub-and-spoke）架构下才能工作，一旦想要超出这个模型，就必须要提供额外的信息。也就是回答类似“这个系统的消息传输模型是什么？”的问题。看一下基于AMQP的各类产品实现的“集群”机制。“模式”的特性依旧还存在，或者显示或者隐示（通过只支持一种模式）。</li>
<li>最后，基于我们在AMQP的经验，尽管它提供了大量丰富的可能的消息传输模式，人们一次又一次的基于它实现相同的几个模式，而忽略了其他东西。</li>
</ul>
<h1 id="Hop-by-Hop-VS-End-to-End"><a href="#Hop-by-Hop-VS-End-to-End" class="headerlink" title="Hop-by-Hop VS. End-to-End"></a>Hop-by-Hop VS. End-to-End</h1><p>在网络栈中最巧妙的一个特性就是就是清晰的hopby-hop功能（IP）和end-to-end功能（TCP，UDP，SCTP等），也就是这个特性，将整个网络栈生态切分开，独立发展。如果没有这种功能的切分，end-to-end协议的每一个小改动对于IPv4和IPv6传输来说都是一种痛苦。<br>这个想法的背后就是在网络传输过程中的每个节点都实现IP协议，然而，只有终端才会实现特殊的end-to-end协议，比如TCP。换句话说，中间节点，比如路由器，不需要知道在IP层之上的end-to-end协议。</p>
<p><img src="http://250bpm.wdfiles.com/local--files/concepts/concepts8.png" alt="topology5"></p>
<p>将IP和TCP层切分的经验之后推广，形成了end-to-end argument形式。end-toend argument说的是，如果它的功能不能够被底层正确地提供（在我们的情况中就是hop-by-hop），也就是，它想要正常工作需要上层（end-to-end层）的协助，那么起初在底层实现也就没多大意义了。</p>
<p>ØMQ坚持end-to-end协议，将栈切分到hop-by-hop层（将节点用”X”开头表示）和end-to-end层（没有用”X”开头表示），这个和上述TCP/IP的拓扑图很像。</p>
<p><img src="http://250bpm.wdfiles.com/local--files/concepts/concepts9.png" alt="topology6"></p>
<p>和TCP/IP同样的是，hop-by-hop层负责消息路由，end-to-end层可以提供附加的服务，比如可靠性，加密等。</p>
<p>然后我们不应该将TCP/IP的比喻用在此太过了，不像网络栈中的单hop-by-hop协议（IP）和多end-to-end（TCP，UDP，SCTP等），在ØMQ的每个end-to-end协议中都有它自己的hop-by-hop协议支撑。看起来像这样。</p>
<p><img src="http://250bpm.wdfiles.com/local--files/concepts/concepts7.png" alt="topology7"></p>
<p>这样安排是因为每个消息模式的的路由功能（hop-by-hop提供）都是不一样的，不能再消息模式间共享。如果在未来碰到两个消息模式可以共享一个路由算法，而只在end-to-end的协议不同，那么我们也将会在单个hop-by-hop层之上，混合多个end-to-end协议。</p>
<p>最终，让我们来看下hop-by-hop VS. end-to-end的具体例子。<br>REQ/REP模式指的是，客户端向多个worker服务端发送一个request请求，worker中的一个会处理这个请求然后产生一个reply，然后将reply发送给客户端。</p>
<p><img src="http://250bpm.wdfiles.com/local--files/concepts/concepts13.png" alt="topology8"></p>
<p>hop-by-hop层要做的是将每个request请求发送到上游节点中的某一个（load-balancing），之后将reply发送给下游的接收到request的节点。</p>
<p>一切运行良好，直到worker处理request失败，或者因为网络的原因，整个拓扑结构的一部分脱离了整体。在这种情况下，客户端将会被阻塞，等待一个永远都不可能的reply。</p>
<p>为了解决这个问题，客户端需要设置一个超时，如果没有在超时时间内没有收到reply，就重发这个request。客户端也应该有能力过滤掉重复的reply。</p>
<p>现在回忆下end-to-end argument，重发功能没有端点的支持是不可能完成的，因此这个不太可能在hop-by-hop层进行实现。</p>
<p>最终我们得到的是，路由功能在hop-by-hop层实现，在此之上的end-to-end层实现可靠性。</p>
<h1 id="命名解析"><a href="#命名解析" class="headerlink" title="命名解析"></a>命名解析</h1><p>在写这篇文章的时间点，ØMQ不提供命名服务。为了加入到拓扑结构中，需要指定一个地址，比如IP地址和TCP端口。</p>
<p>在未来，我们可能会提供命名服务，将一个提供到拓扑结构的名字转换到底层的传输地址。比如，”Brightness-Adjustment-Service”可能被解析成”tcp://192.168.0.1111:5555”。</p>
<p>这里面需要注意的一个是命名解析服务的选择。比如当连接到”NASDAQ stock quotes”拓扑结构，用户想的是连接到本地的一个股票报价中心而不是NASDAQ自己，或者更糟的是，到竞争对手的股票报价中心。</p>
<p><img src="http://250bpm.wdfiles.com/local--files/concepts/concepts3.png" alt="topology9"></p>
<p>通常情况下，命名解析服务都是通过DNS来实现。DNS是唯一个全球可用的分布式数据库。</p>
<h1 id="附录：设计模式"><a href="#附录：设计模式" class="headerlink" title="附录：设计模式"></a>附录：设计模式</h1><p>[请参考原文]</p>
<h2 id="一致性原则"><a href="#一致性原则" class="headerlink" title="一致性原则"></a>一致性原则</h2><h2 id="扩展性原则"><a href="#扩展性原则" class="headerlink" title="扩展性原则"></a>扩展性原则</h2><h2 id="新增插入原则"><a href="#新增插入原则" class="headerlink" title="新增插入原则"></a>新增插入原则</h2><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章反应的架构是当前ØMQ的设计，在未来可能会存在变数。希望通过这篇文章能够介绍一些分布的消息传输，并且在这个领域的未来可以形成一些基础方面的共识。</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CPP </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[过年]]></title>
      <url>/2017/02/09/%E8%BF%87%E5%B9%B4/</url>
      <content type="html"><![CDATA[<h1 id="过去"><a href="#过去" class="headerlink" title="过去"></a>过去</h1><p>小的时候，总是很期待过年。因为过年有新衣服，新鞋子穿，还可以见到爸爸妈妈。当然也有烦心的事情，就是寒假作业有很多。但终究还是期待来的多点。除了穿的、吃的，就是大家都聚集在爷爷奶奶家，吃饭，聊天，玩。能够感受到浓厚的家庭气氛。也自然觉得以后的每年都可以这样。</p>
<p>后来奶奶去世了，整个就变了，大家都不再齐聚在老房子里。不再有聊天，不再有大家坐在一起玩游戏，打扑克牌。之后爷爷也去世了。这个以爷爷奶奶为中心的家也就消失了。</p>
<p>听到越来越多的人说年还是那个年，但是味早已不是那个味。我也有同感，也一直在想我们为什么会有这种感觉。人的眼界在变，时代在变。只不过是之前的感觉，让那么多的变化给冲淡了。</p>
<h1 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h1><p>现在也长大了，也不会再去期待年味如同小时候那一般。期待的是能和家人团聚在一起，谈谈一年来的事情，身边的变化。每当听闻村里的哪个哪个老人去世了，总会沉默一阵子，各种思绪都涌上心头。死亡无法逃避，只是太残忍。</p>
<p>时间没有终点，日复一日。年，只是一个让人体会自己变老，回忆逝去的人的契机。珍惜眼下。</p>
<h1 id="将来"><a href="#将来" class="headerlink" title="将来"></a>将来</h1><p>将来也会成家，有小孩，希望自己的小孩能对过年有好的期待。能做一个好的自己。</p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开源软件架构]]></title>
      <url>/2017/02/07/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<p>The Architecture of Open Source Applications: <a href="http://aosabook.org/en/index.html" target="_blank" rel="external">英文地址</a><br><a href="http://www.ituring.com.cn/book/1143" target="_blank" rel="external">中文翻译地址</a></p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开源 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python的ctype与dll的交互注意点]]></title>
      <url>/2017/01/22/python%E7%9A%84ctype%E4%B8%8Edll%E7%9A%84%E4%BA%A4%E4%BA%92%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>这篇文章不会告诉读者如何去使用ctypes，如何使用ctypes在网上已经有很多重复、简单的例子。这篇文章只是记录自己在实际开发中，使用python测试一个dll模块中遇到的各种问题以及解决办法。</p>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>网络上已经有很多关于ctypes如何与dll交互的文章，大多数也都是点到为止。比如基本类型的使用，指针与引用的处理。但是在实际编程过程中，这里面还有很多细节点需要注意。</p>
<ul>
<li><p>版本匹配</p>
<p>这里要求的是安装的python版本位数与交互的dll的编译版本位数要一致。否则在python加载dll时会提示加载失败。</p>
</li>
<li><p>数据类型</p>
<p>很多博客中已经提及了日常所用的一些C的数据类型，比如c_int,c_long。但是如果用C++开发，且同时用了windows类型，COM类型，那么很明显，基本类型是不够的，自己写class又繁琐。例如VARIANT，FILETIME。这些都是已知的类型。那么就需要导入相应的包。windows类型需要相应的wintypes；COM类型可以借助comtypes包。</p>
</li>
<li><p>运行环境</p>
<p>我自己在开发中使用的python3.X，3.X默认的是使用Unicode。如果dll内部接收的是ASCII的字符串，那么就需要先进行转换，再调用API。可以使用create_string_buffer()进行转换。<br>如果python加载的dll同时还依赖其他的dll，如果不做任何处理，python加载dll时会提示加载失败。原因是python会从python.exe的目录查找被依赖的dll，结果当然就是找不到，所以失败。解决办法有两个：</p>
<ul>
<li>第一个是将被依赖的dll的目录加入到环境变量中；</li>
<li>第二个是将被依赖的所有dll拷贝到python.exe目录。</li>
</ul>
<p>在dll代码中，可能存在参数为const char<em>类型，调用方传入nullptr或者NULL的情况。此时python运行期会提示错误。原因没有调查，不得而知。变通方案就是将传入的nullptr改成””。<br>如果dll的导出API接收const char</em>类型，而python又需要传入一个空字符串。如果直接使用””，在dll代码中使用param == ‘\0’将会失败。具体原因未知，但是通过调试，dll端接收到的却是是长度为0的字符串。变通方案就是在dll端用再用长度判断一下。</p>
<p>在dll端，我们很大概率会使用结构体存储一个结构。比如下面这种格式：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Inner</span>&#123;</span></div><div class="line">  <span class="keyword">int</span> a;</div><div class="line">  <span class="keyword">char</span> *b;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Outter</span> &#123;</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> count;</div><div class="line">Inner* pInner;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>一个API接收一个Outter数组指针：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> declspec(_dllexport) <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(Outter *param, <span class="keyword">unsigned</span> <span class="keyword">int</span> count)</span></span>;</div></pre></td></tr></table></figure></p>
<p>此时在python端，我们需要定义相应的数据结构，如果在C的代码中使用了指针，那么对应在python端也需要使用POINTER：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Inner(Structure):</div><div class="line">		_fields_ = [("a", c_int),</div><div class="line">       			 ("b",c_char_p)]</div><div class="line">class Outter(Structure):</div><div class="line">		_fields_ = [("count", c_uint),</div><div class="line">       			("pInner", POINTER(Inner))]</div></pre></td></tr></table></figure>
<p>这样，在调用的时候，Outter的实例外层加上byref即可：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">count = <span class="number">2</span></div><div class="line">outter_type = Ouuter * count</div><div class="line">outter = outter_type()</div><div class="line">dll.func(byref(outter), c_uint(count))</div></pre></td></tr></table></figure></p>
<h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1><p>发现在测试接口中，有些数据集和时间相关。直接从接口中返回的数据倒是有了，但是很难高效地验证数据的有效性。此时借助matplotlib，将数据集通过图表的形式展示出来，就大大提高了验证数据有效性的效率，同时也很方便观察。</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CPP </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/01/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
